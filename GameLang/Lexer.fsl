{

module Lexer

open System
// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\r' '\n' | '\n' | '\r')
let open_paren = '('
let close_paren = ')'
let letter = ( ['a'-'z'] | ['A'-'Z'] | '+' | '*' | '-' | '/')
let digit = ( ['0'-'9'] )
let alphanum = letter | digit
let id = letter alphanum*
let quote_char = '"'
let notquote_char = [^'"']


rule tokenstream = parse
// --------------------------
| open_paren			{ Parser.OPEN_PAREN }
| close_paren			{ Parser.CLOSE_PAREN }
| "nil"					{ Parser.ATOM_NIL }
| "#T"					{ Parser.TRUE }
| "lambda"				{ Parser.LAMBDA }
| "let*"				{ Parser.LET_STAR }
| "let"					{ Parser.LET }
| "if"					{ Parser.IF }
| "define"				{ Parser.DEFINE }
| id			{ Parser.IDENTIFIER(LexBuffer.LexemeString lexbuf) }
| ['-']?digit+  { Parser.INT(Int32.Parse(LexBuffer.LexemeString lexbuf)) }
| ['-']?digit+('.'digit+)?(['e''E']digit+)?  { Parser.FLOAT(Double.Parse(LexBuffer.LexemeString lexbuf)) }
| quote_char notquote_char* quote_char { let str = LexBuffer.LexemeString lexbuf in Parser.STRING(str.Substring(1, str.Length - 2)) }
// --------------------------
| whitespace    { tokenstream lexbuf }
| newline       { newline lexbuf; tokenstream lexbuf }
// --------------------------
| _             { failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
| eof           { Parser.EOF }